@page "/run/program/{Id:guid}";
@using MistyStep.Models
@using MistyStep.Services
<div class="program-container">

    @if (Program is not null)
    {
        <MudPaper Class="pa-5">
            Current Program:   @Program!.Name
        </MudPaper>
    }
    @if (CurrentExercise is not null)
    {
        <MudPaper Class="pa-5">
            Current Exercise:  @CurrentExercise!.Name
        </MudPaper>
    }
    @if (LastExerciseRecord is not null)
    {

        <MudPaper Class="pa-5">
            Last Exercise Record:   @LastExerciseRecord!.Reps
        </MudPaper>
    }

    @if (NextExercise is not null)
    {

        <MudPaper Class="pa-5">
            Next Exercise:  @NextExercise!.Name
        </MudPaper>
    }

    <MudPaper Class="pa-5">
        Number of Repetetions:
        <MudInput @ref="Input" T="double" InputType="InputType.Number"></MudInput>
    </MudPaper>


    <MistyStep.Components.Timer @ref="TimerComp" OnTimerEnd="@(async () => await TimerEnd())"></MistyStep.Components.Timer>

    <div class="buttons-container">

        <MudButton Color="Color.Tertiary" Variant="Variant.Filled" Class="ml-2" OnClick="GoToResult">STOP</MudButton>
        <MudButton Color="Color.Secondary" Variant="Variant.Outlined" Class="ml-2" OnClick="@(() => TimerComp.StartTimer(CurrentExercise!.ExerciseDurationInSeconds??60,false))">Start øvelse timer</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" Class="ml-2" OnClick="GoToNextExercise">Next Exercise</MudButton>
    </div>

</div>

@code {

    [Parameter]
    public Guid Id { get; set; }

    [Inject]
    public IExerciseService ExerciseService { get; set; }

    public ExerciseProgram? Program { get; set; }

    public Exercise? CurrentExercise { get; set; }

    public Exercise? NextExercise { get; set; }

    public ExerciseRecord? LastExerciseRecord { get; set; }

    public DateTime StartTime { get; set; }

    public Components.Timer? TimerComp { get; set; }

    private int CurrentExerciseIndex { get; set; } = 0;

    private MudInput<double>? Input { get; set; }

    protected override void OnInitialized()
    {
        StartTime = DateTime.UtcNow;
        Program = ExerciseTestList.ExerciseProgramList
        .FirstOrDefault(x => x.Id == Id);
        
        if (Program is null)
        {
            // Program not found
            return;
        }
        
        CurrentExercise = Program!.Exercises[CurrentExerciseIndex];
        NextExercise = Program!.Exercises[CurrentExerciseIndex + 1];
        
        LastExerciseRecord = ExerciseTestList.ExerciseRecordsList
        .OrderBy(x => x.RecordSet)
        .FirstOrDefault(x => x.ExerciseId == CurrentExercise.Id && x.ExerciseProgramId == Id);
    }

    private async Task TimerEnd()
    {

        // alarm sound

    }


    private async Task GoToNextExercise()
    {
        var exerciseRecord = new ExerciseRecord(Guid.NewGuid(), StartTime, CurrentExercise!.Id, Program!.Id, double.Parse(Input!.Text ?? ""));
        await ExerciseService.CreateNewExerciseRecord(exerciseRecord);

        if (CurrentExerciseIndex == Program?.Exercises.Count - 1)
        {
            // Program is done
            GoToResult();
            return;
        }

        CurrentExerciseIndex++;

        CurrentExercise = Program.Exercises[CurrentExerciseIndex];

        if (CurrentExerciseIndex != Program?.Exercises.Count - 1)
        {

            NextExercise = Program.Exercises[CurrentExerciseIndex + 1];
        }
    }

    private void GoToResult()
    {
        // ExerciseRecord = new ExerciseRecord(Guid.NewGuid(), DateTime.UtcNow, CurrentExercise.Id,Program.Id,double.Parse(input.Text));
        // LastExerciseRecord = ExerciseRecord;
        // NavigationManager.NavigateTo($"/result/{Program.Id}");
    }
}
