@page "/run/program/{Id:guid}";
@using MistyStep.Models
@using MistyStep.Services

<MudPaper Class="pa-5">
    @Program.Name
</MudPaper>

<MudPaper Class="pa-5">
    @CurrentExercise.Name
</MudPaper>

<MudPaper Class="pa-5">
    @LastExerciseRecord.Sets
</MudPaper>

<MudPaper Class="pa-5">
    @NextExercise.Name
</MudPaper>

<MudInput @ref="Input" T="string" InputType="InputType.Text"></MudInput>

<MudButton Color="Color.Secondary" Variant="Variant.Outlined" Class="ml-2" OnClick="@(() => TimerComp.StartTimer(CurrentExercise.ExerciseDuration,false))">Start</MudButton>

<MudButton Color="Color.Primary" Variant="Variant.Filled" Class="ml-2" OnClick="GoToNextExercise">Next Exercise</MudButton>

<MistyStep.Components.Timer @ref="TimerComp" OnPauseTimerEnd="PauseTimerEnd" OnTimerEnd="TimerEnd"></MistyStep.Components.Timer>

<MudButton Color="Color.Tertiary" Variant="Variant.Filled" Class="ml-2" >STOP</MudButton>


@code {

    [Parameter]
    public Guid Id { get; set; }

    public ExerciseProgram Program { get; set; }

    public Exercise CurrentExercise { get; set; }

    public Exercise NextExercise { get; set; }

    public ExerciseRecord ExerciseRecord { get; set; }

    public ExerciseRecord LastExerciseRecord { get; set; }

    public Components.Timer TimerComp { get; set; }

    private int CurrentExerciseIndex { get; set; } = 0;

    private MudInput<string> Input;

    protected override void OnInitialized()
    {
        Program = ExerciseTestList.ExerciseProgramList.FirstOrDefault(x => x.Id == Id);
        CurrentExercise = Program.Exercises[CurrentExerciseIndex];
        NextExercise = Program.Exercises[CurrentExerciseIndex + 1];
    }

    private void TimerEnd()
    {
        //Start Pause Timer
        TimerComp.StartTimer(Program.PauseDuration,true);
        // GoToNextExercise();
    }

    private void PauseTimerEnd()
    {
        GoToNextExercise();
    }
    
    private void GoToNextExercise()
    {
        // ExerciseRecord = new ExerciseRecord(Guid.NewGuid(), DateTime.UtcNow, CurrentExercise.Id,Program.Id,double.Parse(input.Text));
        // LastExerciseRecord = ExerciseRecord;
        CurrentExerciseIndex++;
        CurrentExercise = Program.Exercises[CurrentExerciseIndex];
        NextExercise = Program.Exercises[CurrentExerciseIndex + 1];

    }
}
