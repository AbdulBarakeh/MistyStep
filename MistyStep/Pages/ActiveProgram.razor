@page "/run/program/{Id:guid}";
@using MistyStep.Models
@using MistyStep.Services
@if (Program is not null)
{
    <MudPaper Class="pa-5">
        Current Program:   @Program!.Name
    </MudPaper>
}
@if (CurrentExercise is not null)
{
    <MudPaper Class="pa-5">
        Current Exercise:  @CurrentExercise!.Name
    </MudPaper>
}
@if (LastExerciseRecord is not null)
{

    <MudPaper Class="pa-5">
        Last Exercise Record:   @LastExerciseRecord!.Sets
    </MudPaper>
}

@if (NextExercise is not null)
{

    <MudPaper Class="pa-5">
        Next Exercise:  @NextExercise!.Name
    </MudPaper>
}

<MudPaper Class="pa-5">
    Number of Repetetions:
    <MudInput @ref="Input" T="double" InputType="InputType.Number"></MudInput>
</MudPaper>

<MudButton Color="Color.Secondary" Variant="Variant.Outlined" Class="ml-2" OnClick="@(() => TimerComp.StartTimer(TimeSpan.FromSeconds(5),false))">Start øvelse timer</MudButton>

<MudButton Color="Color.Primary" Variant="Variant.Filled" Class="ml-2" OnClick="GoToNextExercise">Next Exercise</MudButton>

<MistyStep.Components.Timer @ref="TimerComp" OnTimerEnd="@(async () => await TimerEnd())"></MistyStep.Components.Timer>

<MudButton Color="Color.Tertiary" Variant="Variant.Filled" Class="ml-2" OnClick="GoToResult">STOP</MudButton>


@code {

    [Parameter]
    public Guid Id { get; set; }

    public ExerciseProgram? Program { get; set; }

    public Exercise? CurrentExercise { get; set; }

    public Exercise? NextExercise { get; set; }

    public ExerciseRecord? ExerciseRecord { get; set; }

    public ExerciseRecord? LastExerciseRecord { get; set; }

    public Components.Timer? TimerComp { get; set; }

    private int CurrentExerciseIndex { get; set; } = 0;

    private MudInput<double>? Input { get; set; }

    protected override void OnInitialized()
    {
        Program = ExerciseTestList.ExerciseProgramList.FirstOrDefault(x => x.Id == Id);
        CurrentExercise = Program.Exercises[CurrentExerciseIndex];
        NextExercise = Program.Exercises[CurrentExerciseIndex + 1];
    }

    private async Task TimerEnd()
    {

        // alarm sound

    }


    private void GoToNextExercise()
    {
        // ExerciseRecord = new ExerciseRecord(Guid.NewGuid(), DateTime.UtcNow, CurrentExercise.Id,Program.Id,double.Parse(input.Text));
        // LastExerciseRecord = ExerciseRecord;
        if (CurrentExerciseIndex == Program?.Exercises.Count - 1)
        {
            // Program is done
            return;
        }
        CurrentExerciseIndex++;
        CurrentExercise = Program.Exercises[CurrentExerciseIndex];
        if (CurrentExerciseIndex != Program?.Exercises.Count - 1)
        {

            NextExercise = Program.Exercises[CurrentExerciseIndex + 1];
        }
    }

    private void GoToResult()
    {
        // ExerciseRecord = new ExerciseRecord(Guid.NewGuid(), DateTime.UtcNow, CurrentExercise.Id,Program.Id,double.Parse(input.Text));
        // LastExerciseRecord = ExerciseRecord;
        // NavigationManager.NavigateTo($"/result/{Program.Id}");
    }
}
